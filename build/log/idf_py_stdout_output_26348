[1/9] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.0\examples\T-RGB\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 C:/Espressif/frameworks/esp-idf-v5.0/examples/T-RGB/build/bootloader/bootloader.bin"
Bootloader binary size 0x5160 bytes. 0x2ea0 bytes (36%) free.
[2/7] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/enfield_logo.c.obj
cc1.exe: warning: command-line option '-std=gnu++23' is valid for C++/ObjC++ but not for C
[3/7] Linking C static library esp-idf\main\libmain.a
[4/7] Generating ld/sections.ld
[5/7] Linking CXX executable T-RGB.elf
[6/7] Generating binary image from built executable
esptool.py v4.4
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated C:/Espressif/frameworks/esp-idf-v5.0/examples/T-RGB/build/T-RGB.bin
[7/7] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.0\examples\T-RGB\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Espressif/frameworks/esp-idf-v5.0/examples/T-RGB/build/partition_table/partition-table.bin C:/Espressif/frameworks/esp-idf-v5.0/examples/T-RGB/build/T-RGB.bin"
T-RGB.bin binary size 0xa84d0 bytes. Smallest app partition is 0x100000 bytes. 0x57b30 bytes (34%) free.
